{"name":"androidNDKStudy","tagline":"A study re: how to make Android Studio, the experimental Gradle plugin, the NDK, JNI, and a mixture of Java, C, and C++, play nice and do tricks. ","body":"# How to get started with Android Studio, the Experimental Gradle plugin, the NDK, JNI, C, and C++\r\n\r\nThe vast majority of Android development is done using Java.  However, there are times when\r\nwe want to access \"native\" code from Java.  For example, maybe you have some C or C++ code\r\nthat you want to access from your Java code.  Whether this is a good idea or not is a separate\r\nissue.  Assuming that you've c/o/n/s/u/l/t/e/d/ /y/o/u/r/ /8/-/b/a/l/l/ made your informed decision and have\r\ndecided to do it, let me share some tips that I found useful.\r\n\r\nYou'll be happy to know that doing this with Android Studio and Gradle is very feasible.\r\nAs of the time of writing (Aug 2015), this apparently is a recent development and almost all other\r\ndocumentation that I have found was for doing this with Eclipse, the command line, or doing various\r\ncontortions to make it work with Android Studio and Gradle.  Fortunately none of that's necessary.\r\n\r\nThe key to success in this endeavor, IMHO, is to figure out the [experimental Gradle plugin]\r\n(http://tools.android.com/tech-docs/new-build-system/gradle-experimental).\r\nYou'll need to also study the [Java Native Interface (JNI)]\r\n(http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html) and the\r\n[Android Native Development Kit (NDK)](http://developer.android.com/ndk/guides/index.html).\r\nJNI is Java's spec for how Java should interact\r\nwith not-Java, and the NDK is the kit you need to connect Android/Java to JNI. The NDK is easy and\r\nstraight-forward to download and install and there are no hidden surprises here.  Start with README.txt\r\nand nose around in /docs and see what you find.\r\n\r\nOne pleasant surprise is that the NDK is fully equipped with its own build tools.  I haven't\r\nyet spelunked into the murky depths of this, but something in there can clearly compile\r\nC and C++ code and build the relevant .so files, even on WinXP.\r\n\r\nAnother pleasant surpise is that the Gradle/NDK is very good at figuring out what to do,\r\nby default, without a lot of hand-holding.  This illustrates the ole convention-over-configuration\r\nprinciple.  So Gradle/NDK is able to find our source files and headers and libraries\r\n and all that stuff, and figure out what to do with whatever outputs it creates,\r\n without me having to micro-manage. Just sit back and enjoy a /f/a/t/ cold one while [Skynet takes over](https://www.youtube.com/watch?v=_Wlsd9mljiU).  No more futzing with cranky software.\r\n\r\nBut wait... there's more!\r\n\r\n##Tips from Tom!\r\n\r\nOne of the things that really bedeviled me in figuring this out was getting the naming\r\n right for C and C++ functions.  For example, if you declare native String foo, in Java class\r\n Bar, you will need a suitably named function _somewhere_ in your collection of C/C++ source files.\r\n The tedious rules for what exactly to name this include the Java package and class name of\r\n the Java doing the calling.  This in and of itself is not so difficult.  The problem is if\r\n you don't get this right, the exception messages are not helpful.  So the tip is...\r\n\r\n Declare your native method first, in your Java source, and let the Android Studio tell you\r\n that it can't find the expected function definition.  When doing so, AS will tell you\r\n specifically what it's looking for!  (Note: This seems to be a sporadically available \"feature\"\r\n so YMMV.)\r\n\r\nAnother thing... Apparently, neither Android.mk nor Application.mk are used\r\nand thus we can just remove them.  Whatever they do, we can do with the experimental\r\nGradle plugin.\r\n\r\nAnother things... Be sure to examine the extern \"C\" { JNIEXPORT ... JNICALL stuff in the\r\ncpp file.  We need it.  If it's not there, your Java cannot find the methods.\r\n\r\n\r\nFor this effort I'm using Android Studio 1.3.2, NDK r10e,\r\ncom.android.tools.build:gradle-experimental:0.2.0, on WinXP.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}